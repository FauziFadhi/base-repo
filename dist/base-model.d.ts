import { CacheKey } from 'cache-utilty';
import { WhereOptions } from 'sequelize';
import { Model } from 'sequelize-typescript';
export declare function base<M extends readonly CacheKey[], TModelAttributes extends {} = any, TCreationAttributes extends {} = TModelAttributes>(cacheKeys: M): {
    new (values?: TCreationAttributes, options?: import("sequelize/types").BuildOptions): {
        id?: any;
        createdAt?: any;
        updatedAt?: any;
        deletedAt?: any;
        version?: any;
        $add<R extends Model<any, any>>(propertyKey: string, instances: string | number | string[] | number[] | R | R[], options?: import("sequelize-typescript").AssociationActionOptions): Promise<unknown>;
        $set<R_1 extends Model<any, any>>(propertyKey: "toJSON" | "equals" | "set" | "_creationAttributes" | "_attributes" | "isNewRecord" | "sequelize" | "where" | "getDataValue" | "setDataValue" | "get" | "setAttributes" | "changed" | "previous" | "save" | "reload" | "validate" | "update" | "destroy" | "restore" | "increment" | "decrement" | "equalsOneOf" | "isSoftDeleted" | "_model" | "addHook" | "removeHook" | "hasHook" | "hasHooks" | "id" | "createdAt" | "updatedAt" | "deletedAt" | "version" | "$add" | "$set" | "$get" | "$count" | "$create" | "$has" | "$remove", instances: string | number | string[] | number[] | R_1 | R_1[], options?: import("sequelize-typescript").AssociationActionOptions): Promise<unknown>;
        $get<K extends "toJSON" | "equals" | "set" | "_creationAttributes" | "_attributes" | "isNewRecord" | "sequelize" | "where" | "getDataValue" | "setDataValue" | "get" | "setAttributes" | "changed" | "previous" | "save" | "reload" | "validate" | "update" | "destroy" | "restore" | "increment" | "decrement" | "equalsOneOf" | "isSoftDeleted" | "_model" | "addHook" | "removeHook" | "hasHook" | "hasHooks" | "id" | "createdAt" | "updatedAt" | "deletedAt" | "version" | "$add" | "$set" | "$get" | "$count" | "$create" | "$has" | "$remove">(propertyKey: K, options?: import("sequelize-typescript").AssociationGetOptions): Promise<import("sequelize-typescript").$GetType<any[K]>>;
        $count<R_2 extends Model<any, any>>(propertyKey: string, options?: import("sequelize-typescript").AssociationCountOptions): Promise<number>;
        $create<R_3 extends Model<any, any>>(propertyKey: string, values: any, options?: import("sequelize-typescript/dist/model/model/association/association-create-options").AssociationCreateOptions): Promise<R_3>;
        $has<R_4 extends Model<any, any>>(propertyKey: string, instances: string | number | string[] | number[] | R_4 | R_4[], options?: import("sequelize-typescript").AssociationGetOptions): Promise<boolean>;
        $remove<R_5 extends Model<any, any>>(propertyKey: string, instances: string | number | string[] | number[] | R_5 | R_5[], options?: any): Promise<any>;
        reload(options?: import("sequelize/types").FindOptions<any>): Promise<any>;
        _attributes: TModelAttributes;
        _creationAttributes: TCreationAttributes;
        isNewRecord: boolean;
        sequelize: import("sequelize/types").Sequelize;
        where(): object;
        getDataValue<K_1 extends keyof TModelAttributes>(key: K_1): TModelAttributes[K_1];
        setDataValue<K_2 extends keyof TModelAttributes>(key: K_2, value: TModelAttributes[K_2]): void;
        get(options?: {
            plain?: boolean;
            clone?: boolean;
        }): TModelAttributes;
        get<K_3 extends "toJSON" | "equals" | "set" | "_creationAttributes" | "_attributes" | "isNewRecord" | "sequelize" | "where" | "getDataValue" | "setDataValue" | "get" | "setAttributes" | "changed" | "previous" | "save" | "reload" | "validate" | "update" | "destroy" | "restore" | "increment" | "decrement" | "equalsOneOf" | "isSoftDeleted" | "_model" | "addHook" | "removeHook" | "hasHook" | "hasHooks" | "id" | "createdAt" | "updatedAt" | "deletedAt" | "version" | "$add" | "$set" | "$get" | "$count" | "$create" | "$has" | "$remove">(key: K_3, options?: {
            plain?: boolean;
            clone?: boolean;
        }): any[K_3];
        get(key: string, options?: {
            plain?: boolean;
            clone?: boolean;
        }): unknown;
        set<K_4 extends keyof TModelAttributes>(key: K_4, value: TModelAttributes[K_4], options?: import("sequelize/types").SetOptions): any;
        set(keys: Partial<TModelAttributes>, options?: import("sequelize/types").SetOptions): any;
        setAttributes<K_5 extends keyof TModelAttributes>(key: K_5, value: TModelAttributes[K_5], options?: import("sequelize/types").SetOptions): any;
        setAttributes(keys: Partial<TModelAttributes>, options?: import("sequelize/types").SetOptions): any;
        changed<K_6 extends "toJSON" | "equals" | "set" | "_creationAttributes" | "_attributes" | "isNewRecord" | "sequelize" | "where" | "getDataValue" | "setDataValue" | "get" | "setAttributes" | "changed" | "previous" | "save" | "reload" | "validate" | "update" | "destroy" | "restore" | "increment" | "decrement" | "equalsOneOf" | "isSoftDeleted" | "_model" | "addHook" | "removeHook" | "hasHook" | "hasHooks" | "id" | "createdAt" | "updatedAt" | "deletedAt" | "version" | "$add" | "$set" | "$get" | "$count" | "$create" | "$has" | "$remove">(key: K_6): boolean;
        changed<K_7 extends "toJSON" | "equals" | "set" | "_creationAttributes" | "_attributes" | "isNewRecord" | "sequelize" | "where" | "getDataValue" | "setDataValue" | "get" | "setAttributes" | "changed" | "previous" | "save" | "reload" | "validate" | "update" | "destroy" | "restore" | "increment" | "decrement" | "equalsOneOf" | "isSoftDeleted" | "_model" | "addHook" | "removeHook" | "hasHook" | "hasHooks" | "id" | "createdAt" | "updatedAt" | "deletedAt" | "version" | "$add" | "$set" | "$get" | "$count" | "$create" | "$has" | "$remove">(key: K_7, dirty: boolean): void;
        changed(): false | string[];
        previous(): Partial<TCreationAttributes>;
        previous<K_8 extends keyof TCreationAttributes>(key: K_8): TCreationAttributes[K_8];
        save(options?: import("sequelize/types").SaveOptions<TModelAttributes>): Promise<any>;
        validate(options?: import("sequelize/types/lib/instance-validator").ValidationOptions): Promise<void>;
        update<K_9 extends "toJSON" | "equals" | "set" | "_creationAttributes" | "_attributes" | "isNewRecord" | "sequelize" | "where" | "getDataValue" | "setDataValue" | "get" | "setAttributes" | "changed" | "previous" | "save" | "reload" | "validate" | "update" | "destroy" | "restore" | "increment" | "decrement" | "equalsOneOf" | "isSoftDeleted" | "_model" | "addHook" | "removeHook" | "hasHook" | "hasHooks" | "id" | "createdAt" | "updatedAt" | "deletedAt" | "version" | "$add" | "$set" | "$get" | "$count" | "$create" | "$has" | "$remove">(key: K_9, value: any[K_9], options?: import("sequelize/types").InstanceUpdateOptions<TModelAttributes>): Promise<any>;
        update(keys: object, options?: import("sequelize/types").InstanceUpdateOptions<TModelAttributes>): Promise<any>;
        destroy(options?: import("sequelize/types").InstanceDestroyOptions): Promise<void>;
        restore(options?: import("sequelize/types").InstanceRestoreOptions): Promise<void>;
        increment<K_10 extends keyof TModelAttributes>(fields: Partial<TModelAttributes> | K_10 | readonly K_10[], options?: import("sequelize/types").IncrementDecrementOptionsWithBy<TModelAttributes>): Promise<any>;
        decrement<K_11 extends keyof TModelAttributes>(fields: Partial<TModelAttributes> | K_11 | readonly K_11[], options?: import("sequelize/types").IncrementDecrementOptionsWithBy<TModelAttributes>): Promise<any>;
        equals(other: any): boolean;
        equalsOneOf(others: readonly any[]): boolean;
        toJSON(): object;
        isSoftDeleted(): boolean;
        _model: import("sequelize/types").Model<TModelAttributes, TCreationAttributes>;
        addHook<K_12 extends "beforeDefine" | "afterDefine" | "beforeInit" | "afterInit" | "beforeConnect" | "afterConnect" | "beforeDisconnect" | "afterDisconnect" | "beforeValidate" | "afterValidate" | "beforeCreate" | "afterCreate" | "beforeDestroy" | "afterDestroy" | "beforeRestore" | "afterRestore" | "beforeUpdate" | "afterUpdate" | "beforeSave" | "afterSave" | "beforeBulkCreate" | "afterBulkCreate" | "beforeBulkDestroy" | "afterBulkDestroy" | "beforeBulkRestore" | "afterBulkRestore" | "beforeBulkUpdate" | "afterBulkUpdate" | "beforeFind" | "beforeCount" | "beforeFindAfterExpandIncludeAll" | "beforeFindAfterOptions" | "afterFind" | "beforeSync" | "afterSync" | "beforeBulkSync" | "afterBulkSync">(hookType: K_12, name: string, fn: import("sequelize/types/lib/hooks").SequelizeHooks<import("sequelize/types").Model<any, any>, TModelAttributes, TCreationAttributes>[K_12]): any;
        addHook<K_13 extends "beforeDefine" | "afterDefine" | "beforeInit" | "afterInit" | "beforeConnect" | "afterConnect" | "beforeDisconnect" | "afterDisconnect" | "beforeValidate" | "afterValidate" | "beforeCreate" | "afterCreate" | "beforeDestroy" | "afterDestroy" | "beforeRestore" | "afterRestore" | "beforeUpdate" | "afterUpdate" | "beforeSave" | "afterSave" | "beforeBulkCreate" | "afterBulkCreate" | "beforeBulkDestroy" | "afterBulkDestroy" | "beforeBulkRestore" | "afterBulkRestore" | "beforeBulkUpdate" | "afterBulkUpdate" | "beforeFind" | "beforeCount" | "beforeFindAfterExpandIncludeAll" | "beforeFindAfterOptions" | "afterFind" | "beforeSync" | "afterSync" | "beforeBulkSync" | "afterBulkSync">(hookType: K_13, fn: import("sequelize/types/lib/hooks").SequelizeHooks<import("sequelize/types").Model<TModelAttributes, TCreationAttributes>, TModelAttributes, TCreationAttributes>[K_13]): any;
        removeHook<K_14 extends "beforeDefine" | "afterDefine" | "beforeInit" | "afterInit" | "beforeConnect" | "afterConnect" | "beforeDisconnect" | "afterDisconnect" | "beforeValidate" | "afterValidate" | "beforeCreate" | "afterCreate" | "beforeDestroy" | "afterDestroy" | "beforeRestore" | "afterRestore" | "beforeUpdate" | "afterUpdate" | "beforeSave" | "afterSave" | "beforeBulkCreate" | "afterBulkCreate" | "beforeBulkDestroy" | "afterBulkDestroy" | "beforeBulkRestore" | "afterBulkRestore" | "beforeBulkUpdate" | "afterBulkUpdate" | "beforeFind" | "beforeCount" | "beforeFindAfterExpandIncludeAll" | "beforeFindAfterOptions" | "afterFind" | "beforeSync" | "afterSync" | "beforeBulkSync" | "afterBulkSync">(hookType: K_14, name: string): any;
        hasHook<K_15 extends "beforeDefine" | "afterDefine" | "beforeInit" | "afterInit" | "beforeConnect" | "afterConnect" | "beforeDisconnect" | "afterDisconnect" | "beforeValidate" | "afterValidate" | "beforeCreate" | "afterCreate" | "beforeDestroy" | "afterDestroy" | "beforeRestore" | "afterRestore" | "beforeUpdate" | "afterUpdate" | "beforeSave" | "afterSave" | "beforeBulkCreate" | "afterBulkCreate" | "beforeBulkDestroy" | "afterBulkDestroy" | "beforeBulkRestore" | "afterBulkRestore" | "beforeBulkUpdate" | "afterBulkUpdate" | "beforeFind" | "beforeCount" | "beforeFindAfterExpandIncludeAll" | "beforeFindAfterOptions" | "afterFind" | "beforeSync" | "afterSync" | "beforeBulkSync" | "afterBulkSync">(hookType: K_15): boolean;
        hasHooks<K_16 extends "beforeDefine" | "afterDefine" | "beforeInit" | "afterInit" | "beforeConnect" | "afterConnect" | "beforeDisconnect" | "afterDisconnect" | "beforeValidate" | "afterValidate" | "beforeCreate" | "afterCreate" | "beforeDestroy" | "afterDestroy" | "beforeRestore" | "afterRestore" | "beforeUpdate" | "afterUpdate" | "beforeSave" | "afterSave" | "beforeBulkCreate" | "afterBulkCreate" | "beforeBulkDestroy" | "afterBulkDestroy" | "beforeBulkRestore" | "afterBulkRestore" | "beforeBulkUpdate" | "afterBulkUpdate" | "beforeFind" | "beforeCount" | "beforeFindAfterExpandIncludeAll" | "beforeFindAfterOptions" | "afterFind" | "beforeSync" | "afterSync" | "beforeBulkSync" | "afterBulkSync">(hookType: K_16): boolean;
    };
    findOneCache<T extends Model<any, any>>(this: (new () => T) & any, keys: M[number]['key'], whereOptions: WhereOptions, cacheOptions?: {
        ttl?: number;
        rejectOnEmpty?: boolean;
    }): Promise<T>;
    isInitialized: boolean;
    init(attributes: import("sequelize/types").ModelAttributes<import("sequelize/types").Model<any, any>, any>, options: import("sequelize/types").InitOptions<import("sequelize/types").Model<any, any>>): Model<any, any>;
    readonly tableName: string;
    readonly primaryKeyAttribute: string;
    readonly primaryKeyAttributes: readonly string[];
    readonly associations: {
        [key: string]: import("sequelize/types").Association<import("sequelize/types").Model<any, any>, import("sequelize/types").Model<any, any>>;
    };
    readonly options: import("sequelize/types").InitOptions<import("sequelize/types").Model<any, any>>;
    readonly rawAttributes: {
        [attribute: string]: import("sequelize/types").ModelAttributeColumnOptions<import("sequelize/types").Model<any, any>>;
    };
    readonly sequelize?: import("sequelize/types").Sequelize;
    removeAttribute(attribute: string): void;
    sync<M_1 extends import("sequelize/types").Model<any, any>>(options?: import("sequelize/types").SyncOptions): Promise<M_1>;
    drop(options?: import("sequelize/types").DropOptions): Promise<void>;
    schema<M_2 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_2>, schema: string, options?: import("sequelize/types").SchemaOptions): import("sequelize/types").ModelCtor<M_2>;
    getTableName(): string | {
        tableName: string;
        schema: string;
        delimiter: string;
    };
    scope<M_3 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_3>, options?: string | import("sequelize/types").ScopeOptions | import("sequelize/types").WhereAttributeHash<M_3> | readonly (string | import("sequelize/types").ScopeOptions)[]): import("sequelize/types").ModelCtor<M_3>;
    addScope<M_4 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_4>, name: string, scope: import("sequelize/types").FindOptions<M_4["_attributes"]>, options?: import("sequelize/types").AddScopeOptions): void;
    addScope<M_5 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_5>, name: string, scope: (...args: readonly any[]) => import("sequelize/types").FindOptions<M_5["_attributes"]>, options?: import("sequelize/types").AddScopeOptions): void;
    findAll<M_6 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_6>, options?: import("sequelize/types").FindOptions<M_6["_attributes"]>): Promise<M_6[]>;
    findByPk<M_7 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_7>, identifier: import("sequelize/types").Identifier, options: Pick<import("sequelize/types").NonNullFindOptions<M_7["_attributes"]>, "type" | "logging" | "benchmark" | "transaction" | "rejectOnEmpty" | "include" | "order" | "group" | "limit" | "offset" | "lock" | "skipLocked" | "raw" | "having" | "subQuery" | "nest" | "plain" | "replacements" | "bind" | "instance" | "mapToModel" | "retry" | "fieldMap" | "useMaster" | "attributes" | "paranoid" | "indexHints">): Promise<M_7>;
    findByPk<M_8 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_8>, identifier?: import("sequelize/types").Identifier, options?: Pick<import("sequelize/types").FindOptions<M_8["_attributes"]>, "type" | "logging" | "benchmark" | "transaction" | "include" | "order" | "group" | "limit" | "offset" | "lock" | "skipLocked" | "raw" | "having" | "subQuery" | "nest" | "plain" | "replacements" | "bind" | "instance" | "mapToModel" | "retry" | "fieldMap" | "useMaster" | "attributes" | "paranoid" | "indexHints">): Promise<M_8>;
    findOne<M_9 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_9>, options: import("sequelize/types").NonNullFindOptions<M_9["_attributes"]>): Promise<M_9>;
    findOne<M_10 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_10>, options?: import("sequelize/types").FindOptions<M_10["_attributes"]>): Promise<M_10>;
    aggregate<T_1, M_11 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_11>, field: keyof M_11["_attributes"] | "*", aggregateFunction: string, options?: import("sequelize/types").AggregateOptions<T_1, M_11["_attributes"]>): Promise<T_1>;
    count<M_12 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_12>, options: import("sequelize/types").CountWithOptions<M_12["_attributes"]>): Promise<{
        [key: string]: number;
    }>;
    count<M_13 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_13>, options?: import("sequelize/types").CountOptions<M_13["_attributes"]>): Promise<number>;
    findAndCountAll<M_14 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_14>, options?: import("sequelize/types").FindAndCountOptions<M_14["_attributes"]>): Promise<{
        rows: M_14[];
        count: number;
    }>;
    max<T_2 extends unknown, M_15 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_15>, field: keyof M_15["_attributes"], options?: import("sequelize/types").AggregateOptions<T_2, M_15["_attributes"]>): Promise<T_2>;
    min<T_3 extends unknown, M_16 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_16>, field: keyof M_16["_attributes"], options?: import("sequelize/types").AggregateOptions<T_3, M_16["_attributes"]>): Promise<T_3>;
    sum<T_4 extends unknown, M_17 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_17>, field: keyof M_17["_attributes"], options?: import("sequelize/types").AggregateOptions<T_4, M_17["_attributes"]>): Promise<number>;
    build<M_18 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_18>, record?: M_18["_creationAttributes"], options?: import("sequelize/types").BuildOptions): M_18;
    bulkBuild<M_19 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_19>, records: readonly M_19["_creationAttributes"][], options?: import("sequelize/types").BuildOptions): M_19[];
    create<M_20 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_20>, values?: M_20["_creationAttributes"], options?: import("sequelize/types").CreateOptions<M_20["_attributes"]>): Promise<M_20>;
    create<M_21 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_21>, values: M_21["_creationAttributes"], options: import("sequelize/types").CreateOptions<M_21["_attributes"]> & {
        returning: false;
    }): Promise<void>;
    findOrBuild<M_22 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_22>, options: import("sequelize/types").FindOrCreateOptions<M_22["_attributes"], M_22["_creationAttributes"]>): Promise<[M_22, boolean]>;
    findOrCreate<M_23 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_23>, options: import("sequelize/types").FindOrCreateOptions<M_23["_attributes"], M_23["_creationAttributes"]>): Promise<[M_23, boolean]>;
    findCreateFind<M_24 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_24>, options: import("sequelize/types").FindOrCreateOptions<M_24["_attributes"], M_24["_creationAttributes"]>): Promise<[M_24, boolean]>;
    upsert<M_25 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_25>, values: M_25["_creationAttributes"], options?: import("sequelize/types").UpsertOptions<M_25["_attributes"]>): Promise<[M_25, boolean]>;
    bulkCreate<M_26 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_26>, records: readonly M_26["_creationAttributes"][], options?: import("sequelize/types").BulkCreateOptions<M_26["_attributes"]>): Promise<M_26[]>;
    truncate<M_27 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_27>, options?: import("sequelize/types").TruncateOptions<M_27["_attributes"]>): Promise<void>;
    destroy<M_28 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_28>, options?: import("sequelize/types").DestroyOptions<M_28["_attributes"]>): Promise<number>;
    restore<M_29 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_29>, options?: import("sequelize/types").RestoreOptions<M_29["_attributes"]>): Promise<void>;
    update<M_30 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_30>, values: Partial<M_30["_attributes"]>, options: import("sequelize/types").UpdateOptions<M_30["_attributes"]>): Promise<[number, M_30[]]>;
    increment<M_31 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_31>, field: keyof M_31["_attributes"], options: import("sequelize/types").IncrementDecrementOptionsWithBy<M_31["_attributes"]>): Promise<M_31>;
    increment<M_32 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_32>, fields: readonly (keyof M_32["_attributes"])[], options: import("sequelize/types").IncrementDecrementOptionsWithBy<M_32["_attributes"]>): Promise<M_32>;
    increment<M_33 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_33>, fields: { [key in keyof M_33["_attributes"]]?: number; }, options: import("sequelize/types").IncrementDecrementOptions<M_33["_attributes"]>): Promise<M_33>;
    describe(): Promise<object>;
    unscoped<M_34 extends import("sequelize/types").ModelType<any, any>>(this: M_34): M_34;
    beforeValidate<M_35 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_35>, name: string, fn: (instance: M_35, options: import("sequelize/types/lib/instance-validator").ValidationOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeValidate<M_36 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_36>, fn: (instance: M_36, options: import("sequelize/types/lib/instance-validator").ValidationOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterValidate<M_37 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_37>, name: string, fn: (instance: M_37, options: import("sequelize/types/lib/instance-validator").ValidationOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterValidate<M_38 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_38>, fn: (instance: M_38, options: import("sequelize/types/lib/instance-validator").ValidationOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeCreate<M_39 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_39>, name: string, fn: (instance: M_39, options: import("sequelize/types").CreateOptions<M_39["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeCreate<M_40 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_40>, fn: (instance: M_40, options: import("sequelize/types").CreateOptions<M_40["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterCreate<M_41 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_41>, name: string, fn: (instance: M_41, options: import("sequelize/types").CreateOptions<M_41["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterCreate<M_42 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_42>, fn: (instance: M_42, options: import("sequelize/types").CreateOptions<M_42["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeDestroy<M_43 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_43>, name: string, fn: (instance: M_43, options: import("sequelize/types").InstanceDestroyOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeDestroy<M_44 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_44>, fn: (instance: M_44, options: import("sequelize/types").InstanceDestroyOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterDestroy<M_45 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_45>, name: string, fn: (instance: M_45, options: import("sequelize/types").InstanceDestroyOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterDestroy<M_46 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_46>, fn: (instance: M_46, options: import("sequelize/types").InstanceDestroyOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeUpdate<M_47 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_47>, name: string, fn: (instance: M_47, options: import("sequelize/types").UpdateOptions<M_47["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeUpdate<M_48 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_48>, fn: (instance: M_48, options: import("sequelize/types").UpdateOptions<M_48["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterUpdate<M_49 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_49>, name: string, fn: (instance: M_49, options: import("sequelize/types").UpdateOptions<M_49["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterUpdate<M_50 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_50>, fn: (instance: M_50, options: import("sequelize/types").UpdateOptions<M_50["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeSave<M_51 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_51>, name: string, fn: (instance: M_51, options: import("sequelize/types").UpdateOptions<M_51["_attributes"]> | import("sequelize/types").SaveOptions<M_51["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeSave<M_52 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_52>, fn: (instance: M_52, options: import("sequelize/types").UpdateOptions<M_52["_attributes"]> | import("sequelize/types").SaveOptions<M_52["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterSave<M_53 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_53>, name: string, fn: (instance: M_53, options: import("sequelize/types").UpdateOptions<M_53["_attributes"]> | import("sequelize/types").SaveOptions<M_53["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterSave<M_54 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_54>, fn: (instance: M_54, options: import("sequelize/types").UpdateOptions<M_54["_attributes"]> | import("sequelize/types").SaveOptions<M_54["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeBulkCreate<M_55 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_55>, name: string, fn: (instances: M_55[], options: import("sequelize/types").BulkCreateOptions<M_55["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeBulkCreate<M_56 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_56>, fn: (instances: M_56[], options: import("sequelize/types").BulkCreateOptions<M_56["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterBulkCreate<M_57 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_57>, name: string, fn: (instances: readonly M_57[], options: import("sequelize/types").BulkCreateOptions<M_57["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterBulkCreate<M_58 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_58>, fn: (instances: readonly M_58[], options: import("sequelize/types").BulkCreateOptions<M_58["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeBulkDestroy<M_59 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_59>, name: string, fn: (options: import("sequelize/types").BulkCreateOptions<M_59["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeBulkDestroy<M_60 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_60>, fn: (options: import("sequelize/types").BulkCreateOptions<M_60["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterBulkDestroy<M_61 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_61>, name: string, fn: (options: import("sequelize/types").DestroyOptions<M_61["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterBulkDestroy<M_62 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_62>, fn: (options: import("sequelize/types").DestroyOptions<M_62["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeBulkUpdate<M_63 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_63>, name: string, fn: (options: import("sequelize/types").UpdateOptions<M_63["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeBulkUpdate<M_64 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_64>, fn: (options: import("sequelize/types").UpdateOptions<M_64["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterBulkUpdate<M_65 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_65>, name: string, fn: (options: import("sequelize/types").UpdateOptions<M_65["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterBulkUpdate<M_66 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_66>, fn: (options: import("sequelize/types").UpdateOptions<M_66["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeFind<M_67 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_67>, name: string, fn: (options: import("sequelize/types").FindOptions<M_67["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeFind<M_68 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_68>, fn: (options: import("sequelize/types").FindOptions<M_68["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeCount<M_69 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_69>, name: string, fn: (options: import("sequelize/types").CountOptions<M_69["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeCount<M_70 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_70>, fn: (options: import("sequelize/types").CountOptions<M_70["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeFindAfterExpandIncludeAll<M_71 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_71>, name: string, fn: (options: import("sequelize/types").FindOptions<M_71["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeFindAfterExpandIncludeAll<M_72 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_72>, fn: (options: import("sequelize/types").FindOptions<M_72["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeFindAfterOptions<M_73 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_73>, name: string, fn: (options: import("sequelize/types").FindOptions<M_73["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeFindAfterOptions<M_74 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_74>, fn: (options: import("sequelize/types").FindOptions<M_74["_attributes"]>) => void): import("sequelize/types/lib/hooks").HookReturn;
    afterFind<M_75 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_75>, name: string, fn: (instancesOrInstance: M_75 | readonly M_75[], options: import("sequelize/types").FindOptions<M_75["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterFind<M_76 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_76>, fn: (instancesOrInstance: M_76 | readonly M_76[], options: import("sequelize/types").FindOptions<M_76["_attributes"]>) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeBulkSync(name: string, fn: (options: import("sequelize/types").SyncOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeBulkSync(fn: (options: import("sequelize/types").SyncOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterBulkSync(name: string, fn: (options: import("sequelize/types").SyncOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterBulkSync(fn: (options: import("sequelize/types").SyncOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeSync(name: string, fn: (options: import("sequelize/types").SyncOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    beforeSync(fn: (options: import("sequelize/types").SyncOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterSync(name: string, fn: (options: import("sequelize/types").SyncOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    afterSync(fn: (options: import("sequelize/types").SyncOptions) => import("sequelize/types/lib/hooks").HookReturn): void;
    hasOne<M_77 extends import("sequelize/types").Model<any, any>, T_5 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_77>, target: import("sequelize/types").ModelStatic<T_5>, options?: import("sequelize/types").HasOneOptions): import("sequelize/types").HasOne<M_77, T_5>;
    belongsTo<M_78 extends import("sequelize/types").Model<any, any>, T_6 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_78>, target: import("sequelize/types").ModelStatic<T_6>, options?: import("sequelize/types").BelongsToOptions): import("sequelize/types").BelongsTo<M_78, T_6>;
    hasMany<M_79 extends import("sequelize/types").Model<any, any>, T_7 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_79>, target: import("sequelize/types").ModelStatic<T_7>, options?: import("sequelize/types").HasManyOptions): import("sequelize/types").HasMany<M_79, T_7>;
    belongsToMany<M_80 extends import("sequelize/types").Model<any, any>, T_8 extends import("sequelize/types").Model<any, any>>(this: import("sequelize/types").ModelStatic<M_80>, target: import("sequelize/types").ModelStatic<T_8>, options: import("sequelize/types").BelongsToManyOptions): import("sequelize/types").BelongsToMany<M_80, T_8>;
    addHook<H extends import("sequelize/types/lib/hooks").Hooks<import("sequelize/types").Model<any, any>, any, any>, K_17 extends "beforeDefine" | "afterDefine" | "beforeInit" | "afterInit" | "beforeConnect" | "afterConnect" | "beforeDisconnect" | "afterDisconnect" | "beforeValidate" | "afterValidate" | "beforeCreate" | "afterCreate" | "beforeDestroy" | "afterDestroy" | "beforeRestore" | "afterRestore" | "beforeUpdate" | "afterUpdate" | "beforeSave" | "afterSave" | "beforeBulkCreate" | "afterBulkCreate" | "beforeBulkDestroy" | "afterBulkDestroy" | "beforeBulkRestore" | "afterBulkRestore" | "beforeBulkUpdate" | "afterBulkUpdate" | "beforeFind" | "beforeCount" | "beforeFindAfterExpandIncludeAll" | "beforeFindAfterOptions" | "afterFind" | "beforeSync" | "afterSync" | "beforeBulkSync" | "afterBulkSync">(this: import("sequelize/types/lib/hooks").HooksStatic<H>, hookType: K_17, name: string, fn: import("sequelize/types/lib/hooks").SequelizeHooks<H["_model"], H["_attributes"], H["_creationAttributes"]>[K_17]): import("sequelize/types/lib/hooks").HooksCtor<H>;
    addHook<H_1 extends import("sequelize/types/lib/hooks").Hooks<import("sequelize/types").Model<any, any>, any, any>, K_18 extends "beforeDefine" | "afterDefine" | "beforeInit" | "afterInit" | "beforeConnect" | "afterConnect" | "beforeDisconnect" | "afterDisconnect" | "beforeValidate" | "afterValidate" | "beforeCreate" | "afterCreate" | "beforeDestroy" | "afterDestroy" | "beforeRestore" | "afterRestore" | "beforeUpdate" | "afterUpdate" | "beforeSave" | "afterSave" | "beforeBulkCreate" | "afterBulkCreate" | "beforeBulkDestroy" | "afterBulkDestroy" | "beforeBulkRestore" | "afterBulkRestore" | "beforeBulkUpdate" | "afterBulkUpdate" | "beforeFind" | "beforeCount" | "beforeFindAfterExpandIncludeAll" | "beforeFindAfterOptions" | "afterFind" | "beforeSync" | "afterSync" | "beforeBulkSync" | "afterBulkSync">(this: import("sequelize/types/lib/hooks").HooksStatic<H_1>, hookType: K_18, fn: import("sequelize/types/lib/hooks").SequelizeHooks<H_1["_model"], H_1["_attributes"], H_1["_creationAttributes"]>[K_18]): import("sequelize/types/lib/hooks").HooksCtor<H_1>;
    removeHook<H_2 extends import("sequelize/types/lib/hooks").Hooks<import("sequelize/types").Model<any, any>, any, any>>(this: import("sequelize/types/lib/hooks").HooksStatic<H_2>, hookType: "beforeDefine" | "afterDefine" | "beforeInit" | "afterInit" | "beforeConnect" | "afterConnect" | "beforeDisconnect" | "afterDisconnect" | "beforeValidate" | "afterValidate" | "beforeCreate" | "afterCreate" | "beforeDestroy" | "afterDestroy" | "beforeRestore" | "afterRestore" | "beforeUpdate" | "afterUpdate" | "beforeSave" | "afterSave" | "beforeBulkCreate" | "afterBulkCreate" | "beforeBulkDestroy" | "afterBulkDestroy" | "beforeBulkRestore" | "afterBulkRestore" | "beforeBulkUpdate" | "afterBulkUpdate" | "beforeFind" | "beforeCount" | "beforeFindAfterExpandIncludeAll" | "beforeFindAfterOptions" | "afterFind" | "beforeSync" | "afterSync" | "beforeBulkSync" | "afterBulkSync", name: string): import("sequelize/types/lib/hooks").HooksCtor<H_2>;
    hasHook<H_3 extends import("sequelize/types/lib/hooks").Hooks<import("sequelize/types").Model<any, any>, any, any>>(this: import("sequelize/types/lib/hooks").HooksStatic<H_3>, hookType: "beforeDefine" | "afterDefine" | "beforeInit" | "afterInit" | "beforeConnect" | "afterConnect" | "beforeDisconnect" | "afterDisconnect" | "beforeValidate" | "afterValidate" | "beforeCreate" | "afterCreate" | "beforeDestroy" | "afterDestroy" | "beforeRestore" | "afterRestore" | "beforeUpdate" | "afterUpdate" | "beforeSave" | "afterSave" | "beforeBulkCreate" | "afterBulkCreate" | "beforeBulkDestroy" | "afterBulkDestroy" | "beforeBulkRestore" | "afterBulkRestore" | "beforeBulkUpdate" | "afterBulkUpdate" | "beforeFind" | "beforeCount" | "beforeFindAfterExpandIncludeAll" | "beforeFindAfterOptions" | "afterFind" | "beforeSync" | "afterSync" | "beforeBulkSync" | "afterBulkSync"): boolean;
    hasHooks<H_4 extends import("sequelize/types/lib/hooks").Hooks<import("sequelize/types").Model<any, any>, any, any>>(this: import("sequelize/types/lib/hooks").HooksStatic<H_4>, hookType: "beforeDefine" | "afterDefine" | "beforeInit" | "afterInit" | "beforeConnect" | "afterConnect" | "beforeDisconnect" | "afterDisconnect" | "beforeValidate" | "afterValidate" | "beforeCreate" | "afterCreate" | "beforeDestroy" | "afterDestroy" | "beforeRestore" | "afterRestore" | "beforeUpdate" | "afterUpdate" | "beforeSave" | "afterSave" | "beforeBulkCreate" | "afterBulkCreate" | "beforeBulkDestroy" | "afterBulkDestroy" | "beforeBulkRestore" | "afterBulkRestore" | "beforeBulkUpdate" | "afterBulkUpdate" | "beforeFind" | "beforeCount" | "beforeFindAfterExpandIncludeAll" | "beforeFindAfterOptions" | "afterFind" | "beforeSync" | "afterSync" | "beforeBulkSync" | "afterBulkSync"): boolean;
};
